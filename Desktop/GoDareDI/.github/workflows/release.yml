name: Build and Release GoDareDI XCFramework

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.0.12)'
        required: true
        default: '2.0.12'

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "Building version: $VERSION"
    
    - name: Build XCFramework
      run: |
        chmod +x build_xcframework.sh
        ./build_xcframework.sh ${{ steps.version.outputs.version }}
    
    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        ls -la GoDareDI-Secure-Distribution/
        
        # Verify XCFramework exists
        if [ ! -d "GoDareDI-Secure-Distribution/GoDareDI.xcframework" ]; then
          echo "❌ XCFramework not found!"
          exit 1
        fi
        
        # Verify zip file exists
        if [ ! -f "GoDareDI-Secure-Distribution/GoDareDI-${{ steps.version.outputs.version }}.xcframework.zip" ]; then
          echo "❌ Zip file not found!"
          exit 1
        fi
        
        # Verify checksum file exists
        if [ ! -f "GoDareDI-Secure-Distribution/checksum.txt" ]; then
          echo "❌ Checksum file not found!"
          exit 1
        fi
        
        echo "✅ All build artifacts verified"
    
    - name: Test XCFramework with SPM
      run: |
        echo "Testing XCFramework with Swift Package Manager..."
        
        # Create a test package
        mkdir -p /tmp/test-spm-package
        cd /tmp/test-spm-package
        
        # Copy the XCFramework
        cp -r "$GITHUB_WORKSPACE/GoDareDI-Secure-Distribution/GoDareDI.xcframework" .
        
        # Create Package.swift
        cat > Package.swift << EOF
        // swift-tools-version: 6.0
        import PackageDescription
        
        let package = Package(
            name: "TestGoDareDI",
            platforms: [
                .iOS(.v13)
            ],
            products: [
                .library(
                    name: "TestGoDareDI",
                    targets: ["TestGoDareDI"]
                ),
            ],
            targets: [
                .binaryTarget(
                    name: "GoDareDI",
                    path: "GoDareDI.xcframework"
                ),
                .target(
                    name: "TestGoDareDI",
                    dependencies: [
                        "GoDareDI"
                    ]
                ),
            ]
        )
        EOF
        
        # Create test source
        mkdir -p Sources/TestGoDareDI
        cat > Sources/TestGoDareDI/TestGoDareDI.swift << EOF
        import Foundation
        import GoDareDI
        
        public struct TestGoDareDI {
            public init() {}
            
            public func testFramework() -> String {
                return "GoDareDI Framework Test - Version ${{ steps.version.outputs.version }}"
            }
        }
        EOF
        
        # Test build
        swift build
        
        echo "✅ SPM test completed successfully"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: GoDareDI v${{ steps.version.outputs.version }}
        body_path: GoDareDI-Secure-Distribution/RELEASE_NOTES.md
        draft: false
        prerelease: false
    
    - name: Upload XCFramework Zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: GoDareDI-Secure-Distribution/GoDareDI-${{ steps.version.outputs.version }}.xcframework.zip
        asset_name: GoDareDI-${{ steps.version.outputs.version }}.xcframework.zip
        asset_content_type: application/zip
    
    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: GoDareDI-Secure-Distribution/checksum.txt
        asset_name: checksum-${{ steps.version.outputs.version }}.txt
        asset_content_type: text/plain
    
    - name: Update Package.swift in repository
      run: |
        echo "Updating Package.swift in repository..."
        
        # Create the new Package.swift
        cat > Package.swift << EOF
        // swift-tools-version: 6.0
        import PackageDescription
        
        let package = Package(
            name: "GoDareDI",
            platforms: [
                .iOS(.v13)
            ],
            products: [
                .library(
                    name: "GoDareDI",
                    targets: ["GoDareDI"]
                ),
            ],
            targets: [
                .binaryTarget(
                    name: "GoDareDI",
                    url: "https://github.com/MohamedAbdelHafezAbozaid/GoDareDI-Secure/releases/download/v${{ steps.version.outputs.version }}/GoDareDI-${{ steps.version.outputs.version }}.xcframework.zip",
                    checksum: "$(cat GoDareDI-Secure-Distribution/checksum.txt)"
                ),
            ]
        )
        EOF
        
        # Commit and push the updated Package.swift
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Package.swift
        git commit -m "Update Package.swift for v${{ steps.version.outputs.version }}"
        git push
    
    - name: Summary
      run: |
        echo "🎉 Release completed successfully!"
        echo "📦 Version: v${{ steps.version.outputs.version }}"
        echo "📁 XCFramework: GoDareDI-${{ steps.version.outputs.version }}.xcframework.zip"
        echo "🔐 Checksum: $(cat GoDareDI-Secure-Distribution/checksum.txt)"
        echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
