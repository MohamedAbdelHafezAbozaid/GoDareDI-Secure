// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios17.0-simulator -enable-objc-interop -swift-version 6 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -module-name GoDareDI -package-name temp_build_ios_arm64_x86_64_simulator
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CryptoKit
import Foundation
@_exported import Foundation/*.UUID*/
import Network
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor public protocol DIAnalyticsProvider : Swift.Sendable {
  @_Concurrency.MainActor func trackEvent(_ event: GoDareDI.DIAnalyticsEvent) async
  @_Concurrency.MainActor func trackDependencyResolution(_ type: Swift.String, duration: Foundation.TimeInterval, success: Swift.Bool) async
  @_Concurrency.MainActor func trackDependencyRegistration(_ type: Swift.String, scope: GoDareDI.DependencyScope) async
  @_Concurrency.MainActor func trackPerformanceIssue(_ issue: GoDareDI.PerformanceIssue) async
  @_Concurrency.MainActor func trackCircularDependency(_ chain: [Swift.String]) async
  @_Concurrency.MainActor func trackError(_ error: any Swift.Error, context: GoDareDI.DependencyContext) async
}
public enum DIAnalyticsEvent : Swift.Sendable {
  case dependencyResolution(type: Swift.String, duration: Foundation.TimeInterval, success: Swift.Bool)
  case dependencyRegistration(type: Swift.String, scope: GoDareDI.DependencyScope)
  case performanceIssue(issue: GoDareDI.PerformanceIssue)
  case circularDependency(chain: [Swift.String])
  case error(error: any Swift.Error, context: GoDareDI.DependencyContext)
  case containerInitialization(duration: Foundation.TimeInterval)
  case containerCleanup(duration: Foundation.TimeInterval)
  case scopeCreation(scopeId: Swift.String)
  case scopeDisposal(scopeId: Swift.String)
  case preloadingStarted(strategy: GoDareDI.PreloadingStrategy)
  case preloadingCompleted(strategy: GoDareDI.PreloadingStrategy, duration: Foundation.TimeInterval)
}
public struct PerformanceIssue : @unchecked Swift.Sendable {
  public let type: GoDareDI.PerformanceIssueType
  public let severity: GoDareDI.PerformanceSeverity
  public let details: [Swift.String : Any]
  public let timestamp: Foundation.Date
  public init(type: GoDareDI.PerformanceIssueType, severity: GoDareDI.PerformanceSeverity, details: [Swift.String : Any] = [:])
}
public enum PerformanceIssueType : Swift.String, Swift.Sendable {
  case slowResolution
  case highMemoryUsage
  case circularDependency
  case cacheMiss
  case scopeLeak
  case preloadingFailure
  @inlinable public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum PerformanceSeverity : Swift.String, Swift.Sendable {
  case low
  case medium
  case high
  case critical
  @inlinable public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct DependencyContext : Swift.Sendable {
  public let dependencyType: Swift.String
  public let scope: GoDareDI.DependencyScope
  public let lifetime: GoDareDI.DependencyLifetime
  public let resolutionStack: [Swift.String]
  public let containerState: GoDareDI.ContainerState
  public let timestamp: Foundation.Date
  public init(dependencyType: Swift.String, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime, resolutionStack: [Swift.String], containerState: GoDareDI.ContainerState)
}
public struct ContainerState : Swift.Sendable {
  public let registeredServicesCount: Swift.Int
  public let activeScopes: [Swift.String]
  public let memoryUsage: Swift.Double
  public let currentScope: Swift.String
  public let isPreloading: Swift.Bool
  public init(registeredServicesCount: Swift.Int, activeScopes: [Swift.String], memoryUsage: Swift.Double, currentScope: Swift.String, isPreloading: Swift.Bool)
}
public enum PreloadingStrategy : Swift.String, Swift.Sendable {
  case all
  case smart
  case viewModelsOnly
  case custom
  @inlinable public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    @inlinable get
  }
}
@_Concurrency.MainActor public class DefaultAnalyticsProvider : GoDareDI.DIAnalyticsProvider {
  @_Concurrency.MainActor final private let token: Swift.String
  @_Concurrency.MainActor final private let baseURL: Swift.String
  @_Concurrency.MainActor final private let session: Foundation.URLSession
  @_Concurrency.MainActor final private let eventBuffer: GoDareDI.EventBuffer
  @_Concurrency.MainActor @_hasInitialValue final private let flushInterval: Swift.Double
  @_Concurrency.MainActor @_hasInitialValue private var flushTimer: Foundation.Timer?
  @_Concurrency.MainActor public init(token: Swift.String, baseURL: Swift.String = "https://us-central1-godaredi-60569.cloudfunctions.net")
  @_Concurrency.MainActor public func cleanup()
  @_Concurrency.MainActor public func trackEvent(_ event: GoDareDI.DIAnalyticsEvent) async
  @_Concurrency.MainActor public func trackDependencyResolution(_ type: Swift.String, duration: Foundation.TimeInterval, success: Swift.Bool) async
  @_Concurrency.MainActor public func trackDependencyRegistration(_ type: Swift.String, scope: GoDareDI.DependencyScope) async
  @_Concurrency.MainActor public func trackPerformanceIssue(_ issue: GoDareDI.PerformanceIssue) async
  @_Concurrency.MainActor public func trackCircularDependency(_ chain: [Swift.String]) async
  @_Concurrency.MainActor public func trackError(_ error: any Swift.Error, context: GoDareDI.DependencyContext) async
  @objc deinit
}
public enum AnalyticsError : Swift.Error, Swift.Sendable {
  case networkError
  case invalidToken
  case serializationError
  case unknown
  @_implements(Swift.Equatable, ==(_:_:)) public static func __derived_enum_equals(_ a: GoDareDI.AnalyticsError, _ b: GoDareDI.AnalyticsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor public class DICrashlyticsIntegration : GoDareDI.DIAnalyticsProvider {
  @_Concurrency.MainActor final private let analyticsProvider: any GoDareDI.DIAnalyticsProvider
  @_Concurrency.MainActor final private let crashlyticsProvider: any GoDareDI.DICrashlyticsProvider
  @_Concurrency.MainActor final private let token: Swift.String
  @_Concurrency.MainActor public init(token: Swift.String, analyticsProvider: (any GoDareDI.DIAnalyticsProvider)? = nil)
  @_Concurrency.MainActor public func trackEvent(_ event: GoDareDI.DIAnalyticsEvent) async
  @_Concurrency.MainActor public func trackDependencyResolution(_ type: Swift.String, duration: Foundation.TimeInterval, success: Swift.Bool) async
  @_Concurrency.MainActor public func trackDependencyRegistration(_ type: Swift.String, scope: GoDareDI.DependencyScope) async
  @_Concurrency.MainActor public func trackPerformanceIssue(_ issue: GoDareDI.PerformanceIssue) async
  @_Concurrency.MainActor public func trackCircularDependency(_ chain: [Swift.String]) async
  @_Concurrency.MainActor public func trackError(_ error: any Swift.Error, context: GoDareDI.DependencyContext) async
  @objc deinit
}
@_Concurrency.MainActor public protocol DICrashlyticsProvider : Swift.Sendable {
  @_Concurrency.MainActor func trackDependencyError(_ error: any Swift.Error, context: GoDareDI.DependencyContext) async
  @_Concurrency.MainActor func trackPerformanceIssue(_ issue: GoDareDI.PerformanceIssue) async
  @_Concurrency.MainActor func trackCircularDependency(_ chain: [Swift.String]) async
  @_Concurrency.MainActor func trackContainerCrash(_ crash: GoDareDI.ContainerCrash) async
}
public struct ContainerCrash : Swift.Sendable {
  public let crashType: GoDareDI.ContainerCrashType
  public let error: any Swift.Error
  public let context: GoDareDI.DependencyContext
  public let stackTrace: [Swift.String]
  public let timestamp: Foundation.Date
  public init(crashType: GoDareDI.ContainerCrashType, error: any Swift.Error, context: GoDareDI.DependencyContext, stackTrace: [Swift.String] = [])
}
public enum ContainerCrashType : Swift.String, Swift.Sendable {
  case resolutionFailure
  case circularDependency
  case scopeLeak
  case memoryLeak
  case preloadingFailure
  case validationFailure
  @inlinable public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    @inlinable get
  }
}
@_Concurrency.MainActor public class DefaultCrashlyticsProvider : GoDareDI.DICrashlyticsProvider {
  @_Concurrency.MainActor final private let token: Swift.String
  @_Concurrency.MainActor final private let baseURL: Swift.String
  @_Concurrency.MainActor final private let session: Foundation.URLSession
  @_Concurrency.MainActor final private let queue: Dispatch.DispatchQueue
  @_Concurrency.MainActor public init(token: Swift.String, baseURL: Swift.String = "https://us-central1-godaredi-60569.cloudfunctions.net")
  @_Concurrency.MainActor public func trackDependencyError(_ error: any Swift.Error, context: GoDareDI.DependencyContext) async
  @_Concurrency.MainActor public func trackPerformanceIssue(_ issue: GoDareDI.PerformanceIssue) async
  @_Concurrency.MainActor public func trackCircularDependency(_ chain: [Swift.String]) async
  @_Concurrency.MainActor public func trackContainerCrash(_ crash: GoDareDI.ContainerCrash) async
  @objc deinit
}
public struct DICrashlyticsConfig : Swift.Sendable {
  public let token: Swift.String
  public let enableCrashlytics: Swift.Bool
  public let enableAnalytics: Swift.Bool
  public let enablePerformanceTracking: Swift.Bool
  public let enableCircularDependencyTracking: Swift.Bool
  public let baseURL: Swift.String
  public init(token: Swift.String, enableCrashlytics: Swift.Bool = true, enableAnalytics: Swift.Bool = true, enablePerformanceTracking: Swift.Bool = true, enableCircularDependencyTracking: Swift.Bool = true, baseURL: Swift.String = "https://us-central1-godaredi-60569.cloudfunctions.net")
}
@_Concurrency.MainActor public protocol DIDashboardSyncProvider : Swift.Sendable {
  @_Concurrency.MainActor func updateDashboard(with dependencyInfo: GoDareDI.DependencyInfo) async throws
  @_Concurrency.MainActor func getDashboardData() async throws -> GoDareDI.DashboardData
}
public struct DependencyInfo : Swift.Sendable, Swift.Codable {
  public let version: Swift.String
  public let dependencies: [GoDareDI.DashboardDependencyNode]
  public let nodes: [GoDareDI.GraphNode]
  public let edges: [GoDareDI.GraphEdge]
  public let analysis: GoDareDI.GraphAnalysis
  public let performanceMetrics: GoDareDI.PerformanceMetrics
  public let timestamp: Foundation.Date
  public init(version: Swift.String = "1.0.0", dependencies: [GoDareDI.DashboardDependencyNode], nodes: [GoDareDI.GraphNode], edges: [GoDareDI.GraphEdge], analysis: GoDareDI.GraphAnalysis, performanceMetrics: GoDareDI.PerformanceMetrics, timestamp: Foundation.Date = Date())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DashboardDependencyNode : Swift.Sendable, Swift.Codable {
  public let id: Swift.String
  public let type: Swift.String
  public let scope: Swift.String
  public let lifetime: Swift.String
  public let dependencies: [Swift.String]
  public let isRegistered: Swift.Bool
  public let resolutionTime: Swift.Double?
  public init(id: Swift.String, type: Swift.String, scope: Swift.String, lifetime: Swift.String, dependencies: [Swift.String], isRegistered: Swift.Bool, resolutionTime: Swift.Double? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DashboardData : Swift.Sendable, Swift.Codable {
  public let hasData: Swift.Bool
  public let dependencyInfo: GoDareDI.DependencyInfo?
  public let analytics: [GoDareDI.AnalyticsData]
  public let recentEvents: [GoDareDI.UsageEvent]
  public let lastUpdated: Foundation.Date?
  public init(hasData: Swift.Bool, dependencyInfo: GoDareDI.DependencyInfo? = nil, analytics: [GoDareDI.AnalyticsData] = [], recentEvents: [GoDareDI.UsageEvent] = [], lastUpdated: Foundation.Date? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnalyticsData : Swift.Sendable, Swift.Codable {
  public let id: Swift.String
  public let date: Swift.String
  public let eventType: Swift.String
  public let count: Swift.Int
  public let data: [Swift.String : GoDareDI.AnyCodable]?
  public init(id: Swift.String, date: Swift.String, eventType: Swift.String, count: Swift.Int, data: [Swift.String : GoDareDI.AnyCodable]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UsageEvent : Swift.Sendable, Swift.Codable {
  public let id: Swift.String
  public let eventType: Swift.String
  public let eventData: [Swift.String : GoDareDI.AnyCodable]?
  public let timestamp: Foundation.Date
  public init(id: Swift.String, eventType: Swift.String, eventData: [Swift.String : GoDareDI.AnyCodable]? = nil, timestamp: Foundation.Date)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AnyCodable : @unchecked Swift.Sendable, Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_Concurrency.MainActor public class DefaultDashboardSyncProvider : GoDareDI.DIDashboardSyncProvider {
  @_Concurrency.MainActor final private let token: Swift.String
  @_Concurrency.MainActor final private let baseURL: Swift.String
  @_Concurrency.MainActor final private let session: Foundation.URLSession
  @_Concurrency.MainActor public init(token: Swift.String, baseURL: Swift.String = "https://us-central1-godaredi-60569.cloudfunctions.net")
  @_Concurrency.MainActor public func updateDashboard(with dependencyInfo: GoDareDI.DependencyInfo) async throws
  @_Concurrency.MainActor public func getDashboardData() async throws -> GoDareDI.DashboardData
  @objc deinit
}
public enum DashboardSyncError : Swift.Error, Swift.Sendable, Foundation.LocalizedError {
  case networkError
  case invalidToken
  case tokenNotFound
  case updateFailed
  case fetchFailed
  case unauthorized
  case serverError(Swift.Int)
  public var errorDescription: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public enum DITokenValidationError : Swift.Error, Swift.Sendable, Foundation.LocalizedError {
  case invalidTokenFormat
  case invalidToken
  case validationFailed(any Swift.Error)
  case networkError
  case serverError(Swift.Int)
  case tokenExpired
  case tokenInactive
  public var errorDescription: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public struct DITokenValidator : Swift.Sendable {
  public static func validateTokenFormat(_ token: Swift.String) -> Swift.Bool
  public static func validateTokenWithFirebase(_ token: Swift.String) async throws -> Swift.Bool
  public static func validateToken(_ token: Swift.String) async throws
}
public struct DITokenInfo : Swift.Sendable {
  public let token: Swift.String
  public let appName: Swift.String
  public let platform: Swift.String
  public let bundleId: Swift.String
  public let isActive: Swift.Bool
  public let createdAt: Foundation.Date
  public let lastUsed: Foundation.Date?
  public let usageCount: Swift.Int
  public init(token: Swift.String, appName: Swift.String, platform: Swift.String, bundleId: Swift.String, isActive: Swift.Bool, createdAt: Foundation.Date, lastUsed: Foundation.Date? = nil, usageCount: Swift.Int = 0)
}
public enum DITokenValidationResult : Swift.Sendable {
  case valid(GoDareDI.DITokenInfo)
  case invalid(GoDareDI.DITokenValidationError)
  case expired
  case inactive
  case networkError(any Swift.Error)
}
@_Concurrency.MainActor public protocol AdvancedDIContainer : Swift.Sendable {
  @_Concurrency.MainActor func register<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor func register<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor func registerSync<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor func registerSync<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor func resolve<T>() async throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor func resolve<T>(_ type: T.Type) async throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor func resolveSync<T>() throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor func resolveSync<T>(_ type: T.Type) throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor func createScope(_ scopeId: Swift.String) async
  @_Concurrency.MainActor func disposeScope(_ scopeId: Swift.String) async
  @_Concurrency.MainActor func setCurrentScope(_ scopeId: Swift.String) async
  @_Concurrency.MainActor func getCurrentScope() -> Swift.String
  @_Concurrency.MainActor func validateDependencies() async throws
  @_Concurrency.MainActor func getDependencyGraph() async -> GoDareDI.DependencyGraph
  @_Concurrency.MainActor func analyzeDependencyGraph() async -> GoDareDI.GraphAnalysis
  @_Concurrency.MainActor func analyzeDependencyGraphWithMetrics() async -> GoDareDI.GraphAnalysis
  @_Concurrency.MainActor func isRegistered<T>(_ type: T.Type) -> Swift.Bool
  @_Concurrency.MainActor func getPerformanceMetrics() async -> GoDareDI.PerformanceMetrics
  @_Concurrency.MainActor func preloadDependencies() async
  @_Concurrency.MainActor func cleanup() async
  @_Concurrency.MainActor func preloadAllGeneric() async throws
  @_Concurrency.MainActor func preloadSmart() async throws
  @_Concurrency.MainActor func preloadViewModelsOnly() async throws
  @_Concurrency.MainActor func getMetadata<T>(_ type: T.Type) -> GoDareDI.DependencyMetadata?
  @_Concurrency.MainActor func registerWithMetadata<T>(_ type: T.Type, metadata: GoDareDI.DependencyMetadata)
  @_Concurrency.MainActor func getMetadata(for key: Swift.String) -> GoDareDI.DependencyMetadata?
  @_Concurrency.MainActor func getDependencyMap() -> [Swift.String : Swift.Set<Swift.String>]
  @_Concurrency.MainActor func getRegisteredServicesCount() -> Swift.Int
  @_Concurrency.MainActor func debugPrintMetadata()
  @_Concurrency.MainActor func debugPrintFactories()
}
@_Concurrency.MainActor final public class AdvancedDIContainerImpl : GoDareDI.AdvancedDIContainer, Swift.Sendable {
  @_Concurrency.MainActor final internal let config: GoDareDI.DIContainerConfig
  @_Concurrency.MainActor @_hasInitialValue final public var singletons: [Swift.String : any Swift.Sendable]
  @_Concurrency.MainActor @_hasInitialValue final internal var scopedInstances: [Swift.String : [Swift.String : any Swift.Sendable]]
  @_Concurrency.MainActor @_hasInitialValue final internal var lazyInstances: [Swift.String : any Swift.Sendable]
  @_Concurrency.MainActor @_hasInitialValue final internal var resolutionStack: [Swift.String]
  @_Concurrency.MainActor @_hasInitialValue final internal var scopeId: Swift.String
  @_Concurrency.MainActor @_hasInitialValue final internal var dependencyMap: [Swift.String : Swift.Set<Swift.String>]
  @_Concurrency.MainActor @_hasInitialValue final internal var performanceMetrics: [Swift.String : Foundation.TimeInterval]
  @_Concurrency.MainActor @_hasInitialValue final internal var resolutionCounts: [Swift.String : Swift.Int]
  @_Concurrency.MainActor @_hasInitialValue final internal var cacheHits: [Swift.String : Swift.Int]
  @_Concurrency.MainActor @_hasInitialValue final public var factories: [Swift.String : GoDareDI.AdvancedDIContainerImpl.FactoryType]
  @_Concurrency.MainActor @_hasInitialValue final internal var typeRegistry: [Swift.String : GoDareDI.DependencyMetadata]
  @_Concurrency.MainActor @_hasInitialValue final internal var analyticsProvider: (any GoDareDI.DIAnalyticsProvider)?
  @_Concurrency.MainActor @_hasInitialValue final internal var crashlyticsConfig: GoDareDI.DICrashlyticsConfig?
  public enum FactoryType : Swift.Sendable {
    case sync(@Sendable (any GoDareDI.AdvancedDIContainer) throws -> any Swift.Sendable)
    case async(@Sendable (any GoDareDI.AdvancedDIContainer) async throws -> any Swift.Sendable)
  }
  @_Concurrency.MainActor public init(config: GoDareDI.DIContainerConfig = DIContainerConfig())
  @_Concurrency.MainActor public init(config: GoDareDI.DIContainerConfig = DIContainerConfig(), crashlyticsConfig: GoDareDI.DICrashlyticsConfig) async throws
  @available(*, deprecated, message: "Use GoDareDISecureInit.initialize() instead. Set token with GoDareDILicense.setToken() first.")
  @_Concurrency.MainActor public init(config: GoDareDI.DIContainerConfig = DIContainerConfig(), token: Swift.String) async throws
  @_Concurrency.MainActor final public var token: Swift.String? {
    get
  }
  @_Concurrency.MainActor final public var hasValidToken: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public var isFreemiumMode: Swift.Bool {
    get
  }
  @_Concurrency.MainActor final public func upgradeToPremium(token: Swift.String) async throws
  @objc deinit
}
public actor ContainerBuilder : Swift.Sendable {
  private var container: GoDareDI.AdvancedDIContainerImpl
  @_hasInitialValue private var registrations: [() async throws -> Swift.Void]
  public init(config: GoDareDI.DIContainerConfig = DIContainerConfig()) async
  public func register<T>(_ type: T.Type, scope: GoDareDI.DependencyScope = .singleton, lifetime: GoDareDI.DependencyLifetime = .application, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
  public func registerSync<T>(_ type: T.Type, scope: GoDareDI.DependencyScope = .singleton, lifetime: GoDareDI.DependencyLifetime = .application, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) throws -> T) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
  public func registerInstance<T>(_ type: T.Type, instance: T, scope: GoDareDI.DependencyScope = .singleton) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
  public func registerModule(_ module: any GoDareDI.DIModule) async -> GoDareDI.ContainerBuilder
  public func build() async throws -> any GoDareDI.AdvancedDIContainer
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public protocol DIModule : Swift.Sendable {
  func configure(container: any GoDareDI.AdvancedDIContainer) async throws
}
extension GoDareDI.ContainerBuilder {
  public func registerService<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
  public func registerRepository<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
  public func registerUseCase<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
  public func registerViewModel<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) async -> GoDareDI.ContainerBuilder where T : Swift.Sendable
}
extension GoDareDI.AdvancedDIContainer {
  @_Concurrency.MainActor public func registerService<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerRepository<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerUseCase<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerViewModel<T>(_ type: T.Type, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerInstance<T>(_ type: T.Type, instance: T, scope: GoDareDI.DependencyScope = .singleton) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerBatch<T>(_ types: [T.Type], scope: GoDareDI.DependencyScope = .singleton, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer, T.Type) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerIf<T>(_ condition: Swift.Bool, _ type: T.Type, scope: GoDareDI.DependencyScope = .singleton, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor public func registerForEnvironment<T>(_ type: T.Type, scope: GoDareDI.DependencyScope = .singleton, development: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T, production: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
}
public struct ContainerFactory : Swift.Sendable {
  public static func create(config: GoDareDI.DIContainerConfig = DIContainerConfig(), configure: @escaping @Sendable (GoDareDI.ContainerBuilder) async -> GoDareDI.ContainerBuilder = { $0 }) async throws -> any GoDareDI.AdvancedDIContainer
  public static func createWithModules(config: GoDareDI.DIContainerConfig = DIContainerConfig(), modules: [any GoDareDI.DIModule]) async throws -> any GoDareDI.AdvancedDIContainer
}
public struct DIContainerConfig : Swift.Sendable {
  public let maxCircularDependencyDepth: Swift.Int
  public let enableCircularDependencyDetection: Swift.Bool
  public let enableDependencyTracking: Swift.Bool
  public let enablePerformanceMetrics: Swift.Bool
  public let enableCaching: Swift.Bool
  public init(maxCircularDependencyDepth: Swift.Int = 3, enableCircularDependencyDetection: Swift.Bool = true, enableDependencyTracking: Swift.Bool = true, enablePerformanceMetrics: Swift.Bool = true, enableCaching: Swift.Bool = true)
  @_hasInitialValue public static let strict: GoDareDI.DIContainerConfig
  @_hasInitialValue public static let lenient: GoDareDI.DIContainerConfig
  @_hasInitialValue public static let disabled: GoDareDI.DIContainerConfig
  @_hasInitialValue public static let performance: GoDareDI.DIContainerConfig
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func validateDependencies() async throws
  @_Concurrency.MainActor final public func getDependencyGraph() async -> GoDareDI.DependencyGraph
  @_Concurrency.MainActor final public func analyzeDependencyGraph() async -> GoDareDI.GraphAnalysis
  @_Concurrency.MainActor final public func analyzeDependencyGraphWithMetrics() async -> GoDareDI.GraphAnalysis
  @_Concurrency.MainActor final public func getDependencyMap() -> [Swift.String : Swift.Set<Swift.String>]
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func getPerformanceMetrics() async -> GoDareDI.PerformanceMetrics
  @_Concurrency.MainActor final public func cleanup() async
  @_Concurrency.MainActor final public func debugPrintMetadata()
  @_Concurrency.MainActor final public func debugPrintFactories()
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func getRegisteredServicesCount() -> Swift.Int
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func preloadDependencies() async
  @_Concurrency.MainActor final public func preloadAllGeneric() async throws
  @_Concurrency.MainActor final public func preloadSmart() async throws
  @_Concurrency.MainActor final public func preloadViewModelsOnly() async throws
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func register<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor final public func register<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime = .application, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor final public func registerSync<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime = .application, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor final public func registerSync<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) throws -> T) where T : Swift.Sendable
  @_Concurrency.MainActor final public func getMetadata<T>(_ type: T.Type) -> GoDareDI.DependencyMetadata?
  @_Concurrency.MainActor final public func registerWithMetadata<T>(_ type: T.Type, metadata: GoDareDI.DependencyMetadata)
  @_Concurrency.MainActor final public func getMetadata(for key: Swift.String) -> GoDareDI.DependencyMetadata?
  @_Concurrency.MainActor final public func isRegistered<T>(_ type: T.Type) -> Swift.Bool
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func resolve<T>() async throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor final public func resolve<T>(_ type: T.Type) async throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor final public func resolveSync<T>() throws -> T where T : Swift.Sendable
  @_Concurrency.MainActor final public func resolveSync<T>(_ type: T.Type) throws -> T where T : Swift.Sendable
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func createScope(_ scopeId: Swift.String) async
  @_Concurrency.MainActor final public func disposeScope(_ scopeId: Swift.String) async
  @_Concurrency.MainActor final public func setCurrentScope(_ scopeId: Swift.String) async
  @_Concurrency.MainActor final public func getCurrentScope() -> Swift.String
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class GoDareDILicense : Swift.Sendable {
  public enum LicenseType : Swift.String, Swift.CaseIterable, Swift.Sendable {
    case trial
    case personal
    case commercial
    case enterprise
    public var maxApps: Swift.Int {
      get
    }
    public var maxUsers: Swift.Int {
      get
    }
    @inlinable public init?(rawValue: Swift.String)
    public typealias AllCases = [GoDareDI.GoDareDILicense.LicenseType]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [GoDareDI.GoDareDILicense.LicenseType] {
      get
    }
    public var rawValue: Swift.String {
      @inlinable get
    }
  }
  public struct TokenResponse : Swift.Codable, Swift.Sendable {
    internal let success: Swift.Bool
    internal let valid: Swift.Bool
    internal let appId: Swift.String
    internal let userId: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  @_Concurrency.MainActor public static func validateToken() async throws -> GoDareDI.GoDareDILicense.TokenResponse
  @_Concurrency.MainActor public static func validateLocalToken() -> Swift.Bool
  @_Concurrency.MainActor public static func setToken(_ token: Swift.String)
  @_Concurrency.MainActor public static func hasFeature(_ feature: Swift.String) async -> Swift.Bool
  @_Concurrency.MainActor public static func canCreateApp() async -> Swift.Bool
  @_Concurrency.MainActor public static func canCreateUser() async -> Swift.Bool
  @objc deinit
}
public enum GoDareDILicenseError : Swift.Error, Foundation.LocalizedError {
  case noLicenseKey
  case invalidLicense
  case licenseExpired
  case networkError
  case serverError
  case featureNotAvailable
  case alreadyInitialized
  public var errorDescription: Swift.String? {
    get
  }
  @_implements(Swift.Equatable, ==(_:_:)) public static func __derived_enum_equals(_ a: GoDareDI.GoDareDILicenseError, _ b: GoDareDI.GoDareDILicenseError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GoDareDI.GoDareDILicense {
  @_Concurrency.MainActor public static func getTokenStatus() async -> Swift.String
  @_Concurrency.MainActor public static func getTokenInfo() async -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class GoDareDISecureInit : Swift.Sendable {
  @_Concurrency.MainActor public static func initialize() async throws -> any GoDareDI.AdvancedDIContainer
  @_Concurrency.MainActor public static func validateToken() async throws -> GoDareDI.GoDareDILicense.TokenResponse
  @_Concurrency.MainActor public static func hasFeature(_ feature: Swift.String) async -> Swift.Bool
  @_Concurrency.MainActor public static func canCreateApp() async -> Swift.Bool
  @_Concurrency.MainActor public static func canCreateUser() async -> Swift.Bool
  @_Concurrency.MainActor public static func getTokenInfo() -> [Swift.String : Any]?
  @_Concurrency.MainActor public static func reset()
  @objc deinit
}
extension GoDareDI.AdvancedDIContainerImpl {
  @_Concurrency.MainActor final public func registerSecure<T>(_ type: T.Type, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime, factory: @escaping @Sendable (any GoDareDI.AdvancedDIContainer) async throws -> T) async throws where T : Swift.Sendable
  @_Concurrency.MainActor final public func resolveSecure<T>() async throws -> T where T : Swift.Sendable
}
extension GoDareDI.GoDareDISecureInit {
  @_Concurrency.MainActor public static func trackUsage(_ feature: Swift.String) async
  @_Concurrency.MainActor public static func checkUsageLimits() async -> Swift.Bool
}
public enum DependencyScope : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case singleton
  case scoped
  case transient
  case lazy
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.DependencyScope]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.DependencyScope] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum DependencyLifetime : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case application
  case session
  case request
  case custom
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.DependencyLifetime]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.DependencyLifetime] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct DependencyMetadata : Swift.Codable, Swift.Sendable {
  internal let type: Swift.String
  public let scope: GoDareDI.DependencyScope
  public let lifetime: GoDareDI.DependencyLifetime
  internal let lazy: Swift.Bool
  internal let dependencies: [Swift.String]
  internal let registrationTime: Foundation.Date
  internal let lastAccessed: Foundation.Date?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PerformanceMetrics : Swift.Codable, Swift.Sendable {
  public let averageResolutionTime: Foundation.TimeInterval
  public let cacheHitRate: Swift.Double
  public let memoryUsage: Swift.Double
  public let totalResolutions: Swift.Int
  public let circularDependencyCount: Swift.Int
  public init(averageResolutionTime: Foundation.TimeInterval, cacheHitRate: Swift.Double, memoryUsage: Swift.Double, totalResolutions: Swift.Int, circularDependencyCount: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CircularDependencyException : Foundation.LocalizedError, Swift.Codable, Swift.Sendable {
  public let message: Swift.String
  public let cycle: [Swift.String]
  public init(_ message: Swift.String, cycle: [Swift.String] = [])
  public var errorDescription: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DependencyResolutionError : Foundation.LocalizedError, Swift.Codable, Swift.Sendable {
  case notRegistered(Swift.String)
  case circularDependency([Swift.String])
  case scopeNotFound(Swift.String)
  case factoryError(Swift.String)
  case validationError(Swift.String)
  case typeMismatch(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GraphNode : Swift.Hashable, Swift.Codable, Swift.Sendable {
  public let id: Swift.String
  public let type: Swift.String
  public let scope: GoDareDI.DependencyScope
  public let lifetime: GoDareDI.DependencyLifetime
  public init(id: Swift.String, type: Swift.String, scope: GoDareDI.DependencyScope, lifetime: GoDareDI.DependencyLifetime)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GoDareDI.GraphNode, rhs: GoDareDI.GraphNode) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GraphEdge : Swift.Hashable, Swift.Codable, Swift.Sendable {
  public let from: Swift.String
  public let to: Swift.String
  public let type: GoDareDI.EdgeType
  public init(from: Swift.String, to: Swift.String, type: GoDareDI.EdgeType = .dependency)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GoDareDI.GraphEdge, rhs: GoDareDI.GraphEdge) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum EdgeType : Swift.String, Swift.Codable, Swift.Sendable {
  case dependency
  case circular
  case weak
  case strong
  @inlinable public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct DependencyNode : Swift.Hashable, Swift.Codable, Swift.Sendable {
  internal let id: Swift.String
  public let scope: GoDareDI.DependencyScope
  internal let dependencies: [Swift.String]
  internal let layer: Swift.Int
  internal let isCircular: Swift.Bool
  public let type: GoDareDI.NodeType
  public let category: GoDareDI.NodeCategory
  public let complexity: GoDareDI.ComplexityLevel
  public let performanceMetrics: GoDareDI.NodePerformanceMetrics
  public let metadata: [Swift.String : Swift.String]
  public let tags: [Swift.String]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GoDareDI.DependencyNode, rhs: GoDareDI.DependencyNode) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum NodeType : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case service
  case repository
  case useCase
  case viewModel
  case controller
  case manager
  case factory
  case utility
  case model
  case `protocol`
  case unknown
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.NodeType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.NodeType] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum NodeCategory : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case infrastructure
  case data
  case domain
  case presentation
  case crossCutting
  case external
  case unknown
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.NodeCategory]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.NodeCategory] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum ComplexityLevel : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case low
  case medium
  case high
  case critical
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.ComplexityLevel]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.ComplexityLevel] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct NodePerformanceMetrics : Swift.Codable, Swift.Sendable {
  public let resolutionTime: Foundation.TimeInterval
  public let memoryFootprint: Swift.Double
  public let cacheHitRate: Swift.Double
  public let resolutionCount: Swift.Int
  public let lastResolved: Foundation.Date?
  public init(resolutionTime: Foundation.TimeInterval, memoryFootprint: Swift.Double, cacheHitRate: Swift.Double, resolutionCount: Swift.Int, lastResolved: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DependencyEdge : Swift.Hashable, Swift.Codable, Swift.Sendable {
  internal let from: Swift.String
  internal let to: Swift.String
  internal let relationship: Swift.String
  internal let isCircular: Swift.Bool
  public let relationshipType: GoDareDI.RelationshipType
  public let strength: GoDareDI.RelationshipStrength
  public let direction: GoDareDI.EdgeDirection
  public let performanceImpact: GoDareDI.PerformanceImpact
  public let metadata: [Swift.String : Swift.String]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: GoDareDI.DependencyEdge, rhs: GoDareDI.DependencyEdge) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum RelationshipType : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case dependency
  case composition
  case aggregation
  case inheritance
  case implementation
  case association
  case injection
  case factory
  case callback
  case event
  case unknown
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.RelationshipType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.RelationshipType] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum RelationshipStrength : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case weak
  case moderate
  case strong
  case critical
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.RelationshipStrength]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.RelationshipStrength] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum EdgeDirection : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case unidirectional
  case bidirectional
  case circular
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.EdgeDirection]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.EdgeDirection] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum PerformanceImpact : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case none
  case low
  case medium
  case high
  case critical
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.PerformanceImpact]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.PerformanceImpact] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct DependencyGraph : Swift.Codable, Swift.Sendable {
  internal let nodes: [GoDareDI.DependencyNode]
  internal let edges: [GoDareDI.DependencyEdge]
  internal let analysis: GoDareDI.GraphAnalysis
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GraphAnalysis : Swift.Codable, Swift.Sendable {
  internal let hasCircularDependencies: Swift.Bool
  internal let totalNodes: Swift.Int
  internal let totalDependencies: Swift.Int
  internal let maxDepth: Swift.Int
  internal let circularDependencyChains: [[Swift.String]]
  internal let analysisTime: Foundation.TimeInterval
  internal let memoryUsage: Swift.Double
  internal let cacheEfficiency: Swift.Double
  public let complexityMetrics: GoDareDI.ComplexityMetrics
  public let performanceMetrics: GoDareDI.GraphPerformanceMetrics
  public let architectureMetrics: GoDareDI.ArchitectureMetrics
  public let healthScore: GoDareDI.HealthScore
  public let recommendations: [GoDareDI.Recommendation]
  public let clusters: [GoDareDI.NodeCluster]
  public let criticalPaths: [GoDareDI.CriticalPath]
  public init(hasCircularDependencies: Swift.Bool, totalNodes: Swift.Int, totalDependencies: Swift.Int, maxDepth: Swift.Int, circularDependencyChains: [[Swift.String]], analysisTime: Foundation.TimeInterval, memoryUsage: Swift.Double, cacheEfficiency: Swift.Double, complexityMetrics: GoDareDI.ComplexityMetrics, performanceMetrics: GoDareDI.GraphPerformanceMetrics, architectureMetrics: GoDareDI.ArchitectureMetrics, healthScore: GoDareDI.HealthScore, recommendations: [GoDareDI.Recommendation], clusters: [GoDareDI.NodeCluster], criticalPaths: [GoDareDI.CriticalPath])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ComplexityMetrics : Swift.Codable, Swift.Sendable {
  public let cyclomaticComplexity: Swift.Int
  public let couplingScore: Swift.Double
  public let cohesionScore: Swift.Double
  public let fanIn: Swift.Int
  public let fanOut: Swift.Int
  public let instability: Swift.Double
  public let abstractness: Swift.Double
  public let distanceFromMainSequence: Swift.Double
  public init(cyclomaticComplexity: Swift.Int, couplingScore: Swift.Double, cohesionScore: Swift.Double, fanIn: Swift.Int, fanOut: Swift.Int, instability: Swift.Double, abstractness: Swift.Double, distanceFromMainSequence: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GraphPerformanceMetrics : Swift.Codable, Swift.Sendable {
  public let averageResolutionTime: Foundation.TimeInterval
  public let slowestResolution: Foundation.TimeInterval
  public let fastestResolution: Foundation.TimeInterval
  public let totalMemoryFootprint: Swift.Double
  public let cacheHitRate: Swift.Double
  public let bottleneckNodes: [Swift.String]
  public let performanceTrend: GoDareDI.PerformanceTrend
  public init(averageResolutionTime: Foundation.TimeInterval, slowestResolution: Foundation.TimeInterval, fastestResolution: Foundation.TimeInterval, totalMemoryFootprint: Swift.Double, cacheHitRate: Swift.Double, bottleneckNodes: [Swift.String], performanceTrend: GoDareDI.PerformanceTrend)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PerformanceTrend : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case improving
  case stable
  case degrading
  case unknown
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.PerformanceTrend]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.PerformanceTrend] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct ArchitectureMetrics : Swift.Codable, Swift.Sendable {
  public let layerViolations: Swift.Int
  public let dependencyInversionViolations: Swift.Int
  public let singleResponsibilityViolations: Swift.Int
  public let openClosedViolations: Swift.Int
  public let liskovSubstitutionViolations: Swift.Int
  public let interfaceSegregationViolations: Swift.Int
  public let architectureCompliance: Swift.Double
  public init(layerViolations: Swift.Int, dependencyInversionViolations: Swift.Int, singleResponsibilityViolations: Swift.Int, openClosedViolations: Swift.Int, liskovSubstitutionViolations: Swift.Int, interfaceSegregationViolations: Swift.Int, architectureCompliance: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HealthScore : Swift.Codable, Swift.Sendable {
  public let overall: Swift.Double
  public let performance: Swift.Double
  public let maintainability: Swift.Double
  public let testability: Swift.Double
  public let scalability: Swift.Double
  public let security: Swift.Double
  public let reliability: Swift.Double
  public init(overall: Swift.Double, performance: Swift.Double, maintainability: Swift.Double, testability: Swift.Double, scalability: Swift.Double, security: Swift.Double, reliability: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Recommendation : Swift.Codable, Swift.Sendable {
  public let type: GoDareDI.RecommendationType
  public let priority: GoDareDI.RecommendationPriority
  public let title: Swift.String
  public let description: Swift.String
  public let affectedNodes: [Swift.String]
  public let estimatedImpact: Swift.String
  public let effort: GoDareDI.EffortLevel
  public init(type: GoDareDI.RecommendationType, priority: GoDareDI.RecommendationPriority, title: Swift.String, description: Swift.String, affectedNodes: [Swift.String], estimatedImpact: Swift.String, effort: GoDareDI.EffortLevel)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RecommendationType : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case performance
  case architecture
  case maintainability
  case security
  case scalability
  case testing
  case documentation
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.RecommendationType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.RecommendationType] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum RecommendationPriority : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case low
  case medium
  case high
  case critical
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.RecommendationPriority]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.RecommendationPriority] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum EffortLevel : Swift.String, Swift.Codable, Swift.Sendable, Swift.CaseIterable {
  case low
  case medium
  case high
  case veryHigh
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.EffortLevel]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.EffortLevel] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct NodeCluster : Swift.Codable, Swift.Sendable {
  public let id: Swift.String
  public let name: Swift.String
  public let nodes: [Swift.String]
  public let cohesion: Swift.Double
  public let coupling: Swift.Double
  public let purpose: Swift.String
  public init(id: Swift.String, name: Swift.String, nodes: [Swift.String], cohesion: Swift.Double, coupling: Swift.Double, purpose: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CriticalPath : Swift.Codable, Swift.Sendable {
  public let id: Swift.String
  public let nodes: [Swift.String]
  public let totalTime: Foundation.TimeInterval
  public let bottleneck: Swift.String
  public let impact: GoDareDI.PerformanceImpact
  public init(id: Swift.String, nodes: [Swift.String], totalTime: Foundation.TimeInterval, bottleneck: Swift.String, impact: GoDareDI.PerformanceImpact)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor public class DependencyVisualizer : Swift.Sendable {
  @_Concurrency.MainActor final private let container: any GoDareDI.AdvancedDIContainer
  @_Concurrency.MainActor final private let config: GoDareDI.VisualizationConfig
  @_Concurrency.MainActor final private let token: Swift.String?
  @_Concurrency.MainActor public init(container: any GoDareDI.AdvancedDIContainer, config: GoDareDI.VisualizationConfig = VisualizationConfig())
  @_Concurrency.MainActor public init(container: any GoDareDI.AdvancedDIContainer, token: Swift.String, config: GoDareDI.VisualizationConfig = VisualizationConfig())
  @_Concurrency.MainActor public func visualize() async throws -> Swift.String
  @_Concurrency.MainActor public func visualizeAsync(type: GoDareDI.VisualizationType, progress: Foundation.Progress? = nil) async throws -> Swift.String
  @objc deinit
}
public enum VisualizationError : Swift.Error, Swift.Sendable, Foundation.LocalizedError {
  case tokenRequired
  case invalidTokenFormat
  case invalidToken
  case tokenExpired
  case tokenInactive
  case tokenValidationFailed(any Swift.Error)
  case networkError
  case serverError(Swift.Int)
  public var errorDescription: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
@_Concurrency.MainActor public struct DependencyGraphView : SwiftUICore.View {
  @_Concurrency.MainActor private let container: any GoDareDI.AdvancedDIContainer
  @_Concurrency.MainActor @_hasInitialValue private var _graph: SwiftUICore.State<GoDareDI.DependencyGraph?>
  @_Concurrency.MainActor @_hasInitialValue private var _analysis: SwiftUICore.State<GoDareDI.GraphAnalysis?>
  @_Concurrency.MainActor @_hasInitialValue private var _selectedNode: SwiftUICore.State<Swift.String?>
  @_Concurrency.MainActor @_hasInitialValue private var _selectedVisualizationType: SwiftUICore.State<GoDareDI.VisualizationType>
  @_Concurrency.MainActor @_hasInitialValue private var _visualizationData: SwiftUICore.State<Swift.String>
  @_Concurrency.MainActor @_hasInitialValue private var _showInteractiveView: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _isLoading: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _errorMessage: SwiftUICore.State<Swift.String?>
  @_Concurrency.MainActor @_hasInitialValue private var _selectedTab: SwiftUICore.State<Swift.Int>
  @_Concurrency.MainActor @_hasInitialValue private var _showCopyFeedback: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor public init(container: any GoDareDI.AdvancedDIContainer)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI19DependencyGraphViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class DiagramGenerators : Swift.Sendable {
  @_Concurrency.MainActor public static func generateMermaidDiagram(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateMermaidDiagramAsync(from graph: GoDareDI.DependencyGraph, progress: Foundation.Progress?) -> Swift.String
  @_Concurrency.MainActor public static func generateGraphvizDiagram(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateGraphvizDiagramAsync(from graph: GoDareDI.DependencyGraph, progress: Foundation.Progress?) -> Swift.String
  @_Concurrency.MainActor public static func generateJSONVisualization(from graph: GoDareDI.DependencyGraph, analysis: GoDareDI.GraphAnalysis) -> Swift.String
  @_Concurrency.MainActor public static func generateTreeVisualization(from graph: GoDareDI.DependencyGraph, maxDepth: Swift.Int = 10) -> Swift.String
  @_Concurrency.MainActor public static func generateNetworkVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateHierarchicalVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateCircularVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateLayeredVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateInteractiveVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateDashboardVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateHeatmapVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateTimelineVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @_Concurrency.MainActor public static func generateClusterVisualization(from graph: GoDareDI.DependencyGraph) -> Swift.String
  @objc deinit
}
public enum VisualizationType : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case mermaid
  case graphviz
  case json
  case tree
  case network
  case hierarchical
  case circular
  case layered
  case interactive
  case dashboard
  case heatmap
  case timeline
  case cluster
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.VisualizationType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.VisualizationType] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum OutputFormat : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case mermaid
  case dot
  case json
  case html
  case svg
  case png
  case pdf
  case markdown
  case csv
  case excel
  case interactive
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.OutputFormat]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.OutputFormat] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum VisualizationTheme : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case modern
  case classic
  case dark
  case light
  case colorful
  case minimal
  case corporate
  case playful
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.VisualizationTheme]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.VisualizationTheme] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum LayoutAlgorithm : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case hierarchical
  case forceDirected
  case circular
  case grid
  case tree
  case layered
  case cluster
  case timeline
  case radial
  case organic
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.LayoutAlgorithm]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.LayoutAlgorithm] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum NodeShape : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case rectangle
  case circle
  case diamond
  case hexagon
  case triangle
  case rounded
  case custom
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.NodeShape]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.NodeShape] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public enum EdgeStyle : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Sendable {
  case solid
  case dashed
  case dotted
  case thick
  case curved
  case straight
  case custom
  @inlinable public init?(rawValue: Swift.String)
  public typealias AllCases = [GoDareDI.EdgeStyle]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [GoDareDI.EdgeStyle] {
    get
  }
  public var rawValue: Swift.String {
    @inlinable get
  }
}
public struct VisualizationConfig : Swift.Codable, Swift.Sendable {
  internal let type: GoDareDI.VisualizationType
  internal let format: GoDareDI.OutputFormat
  internal let showScopes: Swift.Bool
  internal let showLifetimes: Swift.Bool
  internal let showDependencies: Swift.Bool
  internal let groupByLayer: Swift.Bool
  internal let colorizeByScope: Swift.Bool
  internal let interactive: Swift.Bool
  internal let maxDepth: Swift.Int
  internal let includeCircular: Swift.Bool
  internal let enableAsyncRendering: Swift.Bool
  internal let enableProgressTracking: Swift.Bool
  public let theme: GoDareDI.VisualizationTheme
  public let layout: GoDareDI.LayoutAlgorithm
  public let nodeShape: GoDareDI.NodeShape
  public let edgeStyle: GoDareDI.EdgeStyle
  public let showLabels: Swift.Bool
  public let showTooltips: Swift.Bool
  public let showLegend: Swift.Bool
  public let showMetrics: Swift.Bool
  public let showRecommendations: Swift.Bool
  public let animationEnabled: Swift.Bool
  public let exportOptions: GoDareDI.ExportOptions
  public init(type: GoDareDI.VisualizationType = .mermaid, format: GoDareDI.OutputFormat = .mermaid, showScopes: Swift.Bool = true, showLifetimes: Swift.Bool = true, showDependencies: Swift.Bool = true, groupByLayer: Swift.Bool = true, colorizeByScope: Swift.Bool = true, interactive: Swift.Bool = false, maxDepth: Swift.Int = 10, includeCircular: Swift.Bool = true, enableAsyncRendering: Swift.Bool = true, enableProgressTracking: Swift.Bool = true, theme: GoDareDI.VisualizationTheme = .modern, layout: GoDareDI.LayoutAlgorithm = .hierarchical, nodeShape: GoDareDI.NodeShape = .rounded, edgeStyle: GoDareDI.EdgeStyle = .solid, showLabels: Swift.Bool = true, showTooltips: Swift.Bool = true, showLegend: Swift.Bool = true, showMetrics: Swift.Bool = true, showRecommendations: Swift.Bool = true, animationEnabled: Swift.Bool = true, exportOptions: GoDareDI.ExportOptions = ExportOptions())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExportOptions : Swift.Codable, Swift.Sendable {
  public let includeMetadata: Swift.Bool
  public let includePerformance: Swift.Bool
  public let includeAnalysis: Swift.Bool
  public let includeRecommendations: Swift.Bool
  public let compressionLevel: Swift.Int
  public let watermark: Swift.String?
  public let customStyles: [Swift.String : Swift.String]
  public init(includeMetadata: Swift.Bool = true, includePerformance: Swift.Bool = true, includeAnalysis: Swift.Bool = true, includeRecommendations: Swift.Bool = true, compressionLevel: Swift.Int = 6, watermark: Swift.String? = nil, customStyles: [Swift.String : Swift.String] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VisualizationNode : Swift.Codable, Swift.Sendable {
  internal let id: Swift.String
  internal let label: Swift.String
  internal let type: Swift.String
  internal let scope: Swift.String
  internal let layer: Swift.String
  internal let isCircular: Swift.Bool
  internal let dependencies: [Swift.String]
  internal let metadata: [Swift.String : Swift.String]
  public let position: GoDareDI.NodePosition?
  public let style: GoDareDI.NodeStyle?
  public let performance: GoDareDI.NodePerformanceData?
  public let category: Swift.String?
  public let complexity: Swift.String?
  public let tags: [Swift.String]
  public init(id: Swift.String, label: Swift.String, type: Swift.String, scope: Swift.String, layer: Swift.String, isCircular: Swift.Bool, dependencies: [Swift.String], metadata: [Swift.String : Swift.String], position: GoDareDI.NodePosition? = nil, style: GoDareDI.NodeStyle? = nil, performance: GoDareDI.NodePerformanceData? = nil, category: Swift.String? = nil, complexity: Swift.String? = nil, tags: [Swift.String] = [])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NodePosition : Swift.Codable, Swift.Sendable {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double?
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NodeStyle : Swift.Codable, Swift.Sendable {
  public let backgroundColor: Swift.String
  public let borderColor: Swift.String
  public let borderWidth: Swift.Double
  public let textColor: Swift.String
  public let fontSize: Swift.Double
  public let shape: Swift.String
  public let opacity: Swift.Double
  public let shadow: Swift.Bool
  public init(backgroundColor: Swift.String, borderColor: Swift.String, borderWidth: Swift.Double, textColor: Swift.String, fontSize: Swift.Double, shape: Swift.String, opacity: Swift.Double = 1.0, shadow: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NodePerformanceData : Swift.Codable, Swift.Sendable {
  public let resolutionTime: Foundation.TimeInterval
  public let memoryUsage: Swift.Double
  public let cacheHitRate: Swift.Double
  public let resolutionCount: Swift.Int
  public let lastResolved: Foundation.Date?
  public init(resolutionTime: Foundation.TimeInterval, memoryUsage: Swift.Double, cacheHitRate: Swift.Double, resolutionCount: Swift.Int, lastResolved: Foundation.Date?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VisualizationEdge : Swift.Codable, Swift.Sendable {
  internal let from: Swift.String
  internal let to: Swift.String
  internal let type: Swift.String
  internal let label: Swift.String
  internal let isCircular: Swift.Bool
  public let style: GoDareDI.EdgeStyle?
  public let performance: GoDareDI.EdgePerformanceData?
  public let relationshipType: Swift.String?
  public let strength: Swift.String?
  public let direction: Swift.String?
  public let impact: Swift.String?
  public init(from: Swift.String, to: Swift.String, type: Swift.String, label: Swift.String, isCircular: Swift.Bool, style: GoDareDI.EdgeStyle? = nil, performance: GoDareDI.EdgePerformanceData? = nil, relationshipType: Swift.String? = nil, strength: Swift.String? = nil, direction: Swift.String? = nil, impact: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EdgePerformanceData : Swift.Codable, Swift.Sendable {
  public let traversalTime: Foundation.TimeInterval
  public let frequency: Swift.Int
  public let impact: Swift.String
  public init(traversalTime: Foundation.TimeInterval, frequency: Swift.Int, impact: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VisualizationData : Swift.Codable, Swift.Sendable {
  internal let nodes: [GoDareDI.VisualizationNode]
  internal let edges: [GoDareDI.VisualizationEdge]
  internal let metadata: [Swift.String : Swift.String]
  public let analysis: GoDareDI.GraphAnalysis?
  public let recommendations: [GoDareDI.Recommendation]?
  public let clusters: [GoDareDI.NodeCluster]?
  public let criticalPaths: [GoDareDI.CriticalPath]?
  public let healthScore: GoDareDI.HealthScore?
  public let performanceMetrics: GoDareDI.GraphPerformanceMetrics?
  public let complexityMetrics: GoDareDI.ComplexityMetrics?
  public let architectureMetrics: GoDareDI.ArchitectureMetrics?
  public init(nodes: [GoDareDI.VisualizationNode], edges: [GoDareDI.VisualizationEdge], metadata: [Swift.String : Swift.String], analysis: GoDareDI.GraphAnalysis? = nil, recommendations: [GoDareDI.Recommendation]? = nil, clusters: [GoDareDI.NodeCluster]? = nil, criticalPaths: [GoDareDI.CriticalPath]? = nil, healthScore: GoDareDI.HealthScore? = nil, performanceMetrics: GoDareDI.GraphPerformanceMetrics? = nil, complexityMetrics: GoDareDI.ComplexityMetrics? = nil, architectureMetrics: GoDareDI.ArchitectureMetrics? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_Concurrency.MainActor public struct DashboardUpdateView : SwiftUICore.View {
  @_Concurrency.MainActor private let container: any GoDareDI.AdvancedDIContainer
  @_Concurrency.MainActor private let graph: GoDareDI.DependencyGraph?
  @_Concurrency.MainActor private let analysis: GoDareDI.GraphAnalysis?
  @_Concurrency.MainActor @_hasInitialValue private var _isUpdatingDashboard: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _dashboardUpdateMessage: SwiftUICore.State<Swift.String?>
  @_Concurrency.MainActor public init(container: any GoDareDI.AdvancedDIContainer, graph: GoDareDI.DependencyGraph?, analysis: GoDareDI.GraphAnalysis?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI19DashboardUpdateViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct TabButton : SwiftUICore.View {
  @_Concurrency.MainActor internal let title: Swift.String
  @_Concurrency.MainActor internal let icon: Swift.String
  @_Concurrency.MainActor internal let isSelected: Swift.Bool
  @_Concurrency.MainActor internal let action: () -> Swift.Void
  @_Concurrency.MainActor public init(title: Swift.String, icon: Swift.String, isSelected: Swift.Bool, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI9TabButtonV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct ErrorCard : SwiftUICore.View {
  @_Concurrency.MainActor internal let message: Swift.String
  @_Concurrency.MainActor public init(message: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI9ErrorCardV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct LoadingCard : SwiftUICore.View {
  @_Concurrency.MainActor public init()
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI11LoadingCardV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct StatisticsCard : SwiftUICore.View {
  @_Concurrency.MainActor internal let title: Swift.String
  @_Concurrency.MainActor internal let value: Swift.String
  @_Concurrency.MainActor internal let icon: Swift.String
  @_Concurrency.MainActor internal let color: SwiftUICore.Color
  @_Concurrency.MainActor public init(title: Swift.String, value: Swift.String, icon: Swift.String, color: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI14StatisticsCardV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct VisualizationTypeCard : SwiftUICore.View {
  @_Concurrency.MainActor internal let type: GoDareDI.VisualizationType
  @_Concurrency.MainActor internal let isSelected: Swift.Bool
  @_Concurrency.MainActor internal let action: () -> Swift.Void
  @_Concurrency.MainActor public init(type: GoDareDI.VisualizationType, isSelected: Swift.Bool, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI21VisualizationTypeCardV4bodyQrvp", 0) __
}
@available(macOS 13.0, iOS 15.0, *)
@_Concurrency.MainActor public struct DependencyVisualizationView : SwiftUICore.View {
  @_Concurrency.MainActor internal let graph: GoDareDI.DependencyGraph
  @_Concurrency.MainActor @_hasInitialValue private var _selectedVisualizationType: SwiftUICore.State<GoDareDI.VisualizationType>
  @_Concurrency.MainActor @_hasInitialValue private var _outputFormat: SwiftUICore.State<GoDareDI.OutputFormat>
  @_Concurrency.MainActor @_hasInitialValue private var _showScopes: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _showLifetimes: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _showDependencies: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _groupByLayer: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _colorizeByScope: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _interactive: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _maxDepth: SwiftUICore.State<Swift.Int>
  @_Concurrency.MainActor @_hasInitialValue private var _includeCircular: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _enableAsyncRendering: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _enableProgressTracking: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _generationProgress: SwiftUICore.State<Foundation.Progress?>
  @_Concurrency.MainActor @_hasInitialValue private var _isGenerating: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _selectedTab: SwiftUICore.State<Swift.Int>
  @_Concurrency.MainActor public init(graph: GoDareDI.DependencyGraph)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI27DependencyVisualizationViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct DetailRow : SwiftUICore.View {
  @_Concurrency.MainActor internal let label: Swift.String
  @_Concurrency.MainActor internal let value: Swift.String
  @_Concurrency.MainActor public init(label: Swift.String, value: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI9DetailRowV4bodyQrvp", 0) __
}
@available(macOS 13.0, iOS 15.0, *)
@_Concurrency.MainActor public struct InteractiveDependencyGraphView : SwiftUICore.View {
  @_Concurrency.MainActor internal let graph: GoDareDI.DependencyGraph
  @_Concurrency.MainActor @_hasInitialValue private var _selectedNode: SwiftUICore.State<GoDareDI.DependencyNode?>
  @_Concurrency.MainActor @_hasInitialValue private var _showNodeDetails: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _selectedFilter: SwiftUICore.State<GoDareDI.GraphFilter>
  @_Concurrency.MainActor @_hasInitialValue private var _searchText: SwiftUICore.State<Swift.String>
  @_Concurrency.MainActor @_hasInitialValue private var _showOnlyCircular: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _groupByLayer: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _expandedLayers: SwiftUICore.State<Swift.Set<Swift.String>>
  @_Concurrency.MainActor public init(graph: GoDareDI.DependencyGraph)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI30InteractiveDependencyGraphViewV4bodyQrvp", 0) __
}
@available(macOS 13.0, iOS 15.0, *)
@_Concurrency.MainActor public struct NodeDetailView : SwiftUICore.View {
  @_Concurrency.MainActor internal let node: GoDareDI.DependencyNode
  @_Concurrency.MainActor internal let graph: GoDareDI.DependencyGraph
  @_Concurrency.MainActor @_hasInitialValue private var _dismiss: SwiftUICore.Environment<SwiftUI.DismissAction>
  @_Concurrency.MainActor public init(node: GoDareDI.DependencyNode, graph: GoDareDI.DependencyGraph)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 15.0, macOS 13.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI14NodeDetailViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor public struct SimpleDependencyGraphView : SwiftUICore.View {
  @_Concurrency.MainActor private let container: any GoDareDI.AdvancedDIContainer
  @_Concurrency.MainActor @_hasInitialValue private var _graph: SwiftUICore.State<GoDareDI.DependencyGraph?>
  @_Concurrency.MainActor @_hasInitialValue private var _analysis: SwiftUICore.State<GoDareDI.GraphAnalysis?>
  @_Concurrency.MainActor @_hasInitialValue private var _visualizationData: SwiftUICore.State<Swift.String>
  @_Concurrency.MainActor @_hasInitialValue private var _isLoading: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _errorMessage: SwiftUICore.State<Swift.String?>
  @_Concurrency.MainActor @_hasInitialValue private var _showCopyFeedback: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _isUpdatingDashboard: SwiftUICore.State<Swift.Bool>
  @_Concurrency.MainActor @_hasInitialValue private var _dashboardUpdateMessage: SwiftUICore.State<Swift.String?>
  @_Concurrency.MainActor public init(container: any GoDareDI.AdvancedDIContainer)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8GoDareDI25SimpleDependencyGraphViewV4bodyQrvp", 0) __
}
extension GoDareDI.PerformanceIssueType : Swift.Equatable {}
extension GoDareDI.PerformanceIssueType : Swift.Hashable {}
extension GoDareDI.PerformanceIssueType : Swift.RawRepresentable {}
extension GoDareDI.PerformanceSeverity : Swift.Equatable {}
extension GoDareDI.PerformanceSeverity : Swift.Hashable {}
extension GoDareDI.PerformanceSeverity : Swift.RawRepresentable {}
extension GoDareDI.PreloadingStrategy : Swift.Equatable {}
extension GoDareDI.PreloadingStrategy : Swift.Hashable {}
extension GoDareDI.PreloadingStrategy : Swift.RawRepresentable {}
extension GoDareDI.AnalyticsError : Swift.Equatable {}
extension GoDareDI.AnalyticsError : Swift.Hashable {}
extension GoDareDI.ContainerCrashType : Swift.Equatable {}
extension GoDareDI.ContainerCrashType : Swift.Hashable {}
extension GoDareDI.ContainerCrashType : Swift.RawRepresentable {}
extension GoDareDI.GoDareDILicense.LicenseType : Swift.Equatable {}
extension GoDareDI.GoDareDILicense.LicenseType : Swift.Hashable {}
extension GoDareDI.GoDareDILicense.LicenseType : Swift.RawRepresentable {}
extension GoDareDI.GoDareDILicenseError : Swift.Equatable {}
extension GoDareDI.GoDareDILicenseError : Swift.Hashable {}
extension GoDareDI.DependencyScope : Swift.Equatable {}
extension GoDareDI.DependencyScope : Swift.Hashable {}
extension GoDareDI.DependencyScope : Swift.RawRepresentable {}
extension GoDareDI.DependencyLifetime : Swift.RawRepresentable {}
extension GoDareDI.EdgeType : Swift.Equatable {}
extension GoDareDI.EdgeType : Swift.Hashable {}
extension GoDareDI.EdgeType : Swift.RawRepresentable {}
extension GoDareDI.NodeType : Swift.Equatable {}
extension GoDareDI.NodeType : Swift.Hashable {}
extension GoDareDI.NodeType : Swift.RawRepresentable {}
extension GoDareDI.NodeCategory : Swift.Equatable {}
extension GoDareDI.NodeCategory : Swift.Hashable {}
extension GoDareDI.NodeCategory : Swift.RawRepresentable {}
extension GoDareDI.ComplexityLevel : Swift.Equatable {}
extension GoDareDI.ComplexityLevel : Swift.Hashable {}
extension GoDareDI.ComplexityLevel : Swift.RawRepresentable {}
extension GoDareDI.RelationshipType : Swift.Equatable {}
extension GoDareDI.RelationshipType : Swift.Hashable {}
extension GoDareDI.RelationshipType : Swift.RawRepresentable {}
extension GoDareDI.RelationshipStrength : Swift.Equatable {}
extension GoDareDI.RelationshipStrength : Swift.Hashable {}
extension GoDareDI.RelationshipStrength : Swift.RawRepresentable {}
extension GoDareDI.EdgeDirection : Swift.Equatable {}
extension GoDareDI.EdgeDirection : Swift.Hashable {}
extension GoDareDI.EdgeDirection : Swift.RawRepresentable {}
extension GoDareDI.PerformanceImpact : Swift.Equatable {}
extension GoDareDI.PerformanceImpact : Swift.Hashable {}
extension GoDareDI.PerformanceImpact : Swift.RawRepresentable {}
extension GoDareDI.PerformanceTrend : Swift.Equatable {}
extension GoDareDI.PerformanceTrend : Swift.Hashable {}
extension GoDareDI.PerformanceTrend : Swift.RawRepresentable {}
extension GoDareDI.RecommendationType : Swift.Equatable {}
extension GoDareDI.RecommendationType : Swift.Hashable {}
extension GoDareDI.RecommendationType : Swift.RawRepresentable {}
extension GoDareDI.RecommendationPriority : Swift.Equatable {}
extension GoDareDI.RecommendationPriority : Swift.Hashable {}
extension GoDareDI.RecommendationPriority : Swift.RawRepresentable {}
extension GoDareDI.EffortLevel : Swift.Equatable {}
extension GoDareDI.EffortLevel : Swift.Hashable {}
extension GoDareDI.EffortLevel : Swift.RawRepresentable {}
extension GoDareDI.DependencyGraphView : Swift.Sendable {}
extension GoDareDI.VisualizationType : Swift.Equatable {}
extension GoDareDI.VisualizationType : Swift.Hashable {}
extension GoDareDI.VisualizationType : Swift.RawRepresentable {}
extension GoDareDI.OutputFormat : Swift.Equatable {}
extension GoDareDI.OutputFormat : Swift.Hashable {}
extension GoDareDI.OutputFormat : Swift.RawRepresentable {}
extension GoDareDI.VisualizationTheme : Swift.Equatable {}
extension GoDareDI.VisualizationTheme : Swift.Hashable {}
extension GoDareDI.VisualizationTheme : Swift.RawRepresentable {}
extension GoDareDI.LayoutAlgorithm : Swift.Equatable {}
extension GoDareDI.LayoutAlgorithm : Swift.Hashable {}
extension GoDareDI.LayoutAlgorithm : Swift.RawRepresentable {}
extension GoDareDI.NodeShape : Swift.Equatable {}
extension GoDareDI.NodeShape : Swift.Hashable {}
extension GoDareDI.NodeShape : Swift.RawRepresentable {}
extension GoDareDI.EdgeStyle : Swift.Equatable {}
extension GoDareDI.EdgeStyle : Swift.Hashable {}
extension GoDareDI.EdgeStyle : Swift.RawRepresentable {}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
extension GoDareDI.DashboardUpdateView : Swift.Sendable {}
extension GoDareDI.TabButton : Swift.Sendable {}
extension GoDareDI.ErrorCard : Swift.Sendable {}
extension GoDareDI.LoadingCard : Swift.Sendable {}
extension GoDareDI.StatisticsCard : Swift.Sendable {}
extension GoDareDI.VisualizationTypeCard : Swift.Sendable {}
@available(macOS 13.0, iOS 15.0, *)
extension GoDareDI.DependencyVisualizationView : Swift.Sendable {}
extension GoDareDI.DetailRow : Swift.Sendable {}
@available(macOS 13.0, iOS 15.0, *)
extension GoDareDI.InteractiveDependencyGraphView : Swift.Sendable {}
@available(macOS 13.0, iOS 15.0, *)
extension GoDareDI.NodeDetailView : Swift.Sendable {}
extension GoDareDI.SimpleDependencyGraphView : Swift.Sendable {}
