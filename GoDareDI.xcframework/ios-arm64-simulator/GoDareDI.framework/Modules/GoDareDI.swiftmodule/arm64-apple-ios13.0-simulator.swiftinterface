// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GoDareDI
import Foundation
import SwiftUI
import CoreGraphics
@_exported import Foundation
@_exported import SwiftUI
@_exported import CoreGraphics
public protocol AdvancedDIContainer : AnyObject, Sendable {
  func register<T>(_ type: T.Type, scope: DependencyScope, lifetime: DependencyLifetime, factory: @escaping (AdvancedDIContainer) async throws -> T) async throws
  func resolve<T>(_ type: T.Type) async throws -> T
  func resolveSync<T>(_ type: T.Type) throws -> T
  func setCurrentScope(_ scope: String) async
  func preloadAllGeneric() async throws
}
public protocol DIModule {
  func configure(container: AdvancedDareDI.AdvancedDIContainer) async throws
}
public enum DependencyScope : String, CaseIterable, Codable, Sendable {
  case singleton = "singleton"
  case scoped = "scoped"
  case transient = "transient"
}
public enum DependencyLifetime : String, CaseIterable, Codable, Sendable {
  case application = "application"
  case session = "session"
  case request = "request"
}
public enum StorageKey : String, CaseIterable, Codable, Sendable {
  case token = "token"
  case phoneNumber = "phoneNumber"
  case authorization = "authorization"
}
public class GoDareDILicense {
  public static func setToken(_ token: String)
  public static func validateToken() async throws -> Bool
}
public class GoDareDISecureInit {
  public static func initialize() async throws -> AdvancedDIContainer
}
public enum GoDareDILicenseError : Error, Sendable {
  case noLicenseKey
  case invalidLicense
  case licenseExpired
  case networkError(Error)
  case invalidTokenFormat
  case validationFailed(Error)
}
public struct DependencyNode : Hashable, Codable, Sendable {
  public let id: String
  public let scope: DependencyScope
  let dependencies: [String]
  let layer: Int
  let isCircular: Bool
  public let position: CoreGraphics.CGPoint
  public let metadata: [String : String]
  public init(id: String, scope: DependencyScope, dependencies: [String], layer: Int, isCircular: Bool, position: CoreGraphics.CGPoint, metadata: [String : String])
}
public struct DependencyEdge : Hashable, Codable, Sendable {
  let from: String
  let to: String
  public let weight: Double
  public let style: EdgeStyle
  public init(from: String, to: String, weight: Double, style: EdgeStyle)
}
public enum EdgeStyle : String, Codable, Sendable, CaseIterable {
  case solid = "solid"
  case dashed = "dashed"
  case dotted = "dotted"
}
public struct DependencyGraph : Codable, Sendable {
  public let nodes: [DependencyNode]
  public let edges: [DependencyEdge]
  public let analysis: GraphAnalysis
  public init(nodes: [DependencyNode], edges: [DependencyEdge], analysis: GraphAnalysis)
}
public struct GraphAnalysis : Codable, Sendable {
  public let totalNodes: Int
  public let totalEdges: Int
  public let maxDepth: Int
  public let circularDependencies: [String]
  public let isComplete: Bool
  public let complexityMetrics: ComplexityMetrics
  public let performanceMetrics: GraphPerformanceMetrics
  public let architectureMetrics: ArchitectureMetrics
  public let healthScore: HealthScore
  public init(totalNodes: Int, totalEdges: Int, maxDepth: Int, circularDependencies: [String], isComplete: Bool, complexityMetrics: ComplexityMetrics, performanceMetrics: GraphPerformanceMetrics, architectureMetrics: ArchitectureMetrics, healthScore: HealthScore)
}
public struct ComplexityMetrics : Codable, Sendable {
  public let cyclomaticComplexity: Int
  public let couplingScore: Double
  public let cohesionScore: Double
  public init(cyclomaticComplexity: Int, couplingScore: Double, cohesionScore: Double)
}
public struct GraphPerformanceMetrics : Codable, Sendable {
  public let averageResolutionTime: Double
  public let maxResolutionTime: Double
  public let memoryUsage: Double
  public init(averageResolutionTime: Double, maxResolutionTime: Double, memoryUsage: Double)
}
public struct ArchitectureMetrics : Codable, Sendable {
  public let layerDistribution: [String : Int]
  public let scopeDistribution: [String : Int]
  public let dependencyDepth: Int
  public init(layerDistribution: [String : Int], scopeDistribution: [String : Int], dependencyDepth: Int)
}
public struct HealthScore : Codable, Sendable {
  public let overall: Double
  public let maintainability: Double
  public let testability: Double
  public let performance: Double
  public init(overall: Double, maintainability: Double, testability: Double, performance: Double)
}
public enum NodeCategory : String, Codable, Sendable, CaseIterable {
  case core = "Core"
  case service = "Service"
  case repository = "Repository"
  case viewModel = "ViewModel"
  case view = "View"
  case business = "Business"
  case unknown = "Unknown"
}
public struct DependencyGraphView : SwiftUI.View {
  public init()
  public var body: some SwiftUI.View { get }
}
